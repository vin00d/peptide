# AUTOGENERATED! DO NOT EDIT! File to edit: 99_utils.ipynb (unless otherwise specified).

__all__ = ['visualize_2pcas', 'visualize_3pcas', 'train_predict']

# Cell

from .imports import *

# Cell

def visualize_2pcas(pcs, y):
    fig, ax = plt.subplots(figsize=(10, 5))
    plot = plt.scatter(pcs[:,0], pcs[:,1], c=y, marker='.')
    ax.set_xlabel('PC 1')
    ax.set_ylabel('PC 2')
    ax.legend(
        handles=plot.legend_elements()[0],
        labels=['No', 'Yes'])

# Cell

def visualize_3pcas(pcs, y):
    fig, ax = plt.subplots(figsize=(10, 5))
    ax = fig.add_subplot(projection='3d')
    plot = ax.scatter(pcs[:,0], pcs[:,1], pcs[:,2], c=y)
    ax.set_xlabel('PC 1')
    ax.set_ylabel('PC 2')
    ax.set_zlabel('PC 3')
    ax.legend(
        handles=plot.legend_elements()[0],
        labels=['No', 'Yes'])

# Cell

def train_predict(X_train, y_train, X_test, y_test):
    '''Temporary helper function to quickly train and predict'''

    lr = LogisticRegression(max_iter=10000)
    lr.fit(X_train, y_train)

    svc = LinearSVC(max_iter=10000)
    svc.fit(X_train, y_train)

    xgb = XGBClassifier()
    xgb.fit(X_train, y_train)

    lr_preds = lr.predict(X_test)
    svc_preds = svc.predict(X_test)
    xgb_preds = xgb.predict(X_test)

    scores = []
    for preds in [lr_preds, svc_preds, xgb_preds]:
        scores.append(
            [
                accuracy_score(y_test, preds),
                recall_score(y_test, preds),
                precision_score(y_test, preds),
                f1_score(y_test, preds),
            ]
        )

    return pd.DataFrame(scores, columns=["acc", "recall", "precision", "f1"], index=["lr", "svc", "xgb"])