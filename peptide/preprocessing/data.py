# AUTOGENERATED! DO NOT EDIT! File to edit: 01_preprocessing_data.ipynb (unless otherwise specified).

__all__ = ['get_acp_data', 'get_amp_data', 'get_dna_bind_data', 'get_all_data']

# Cell
from ..basics import *
import pandas as pd
import os

# Cell

def get_acp_data():
    '''Load, clean and return ACP train and test dataframes'''

    acp_train_df = pd.read_csv(f'{DATA_STORE}/acp/train_data.csv')
    acp_test_df = pd.read_csv(f'{DATA_STORE}/acp/test_data.csv')

    acp_train_df.rename(columns={'sequences': 'sequence', 'label': 'label_acp'}, inplace=True)
    acp_test_df.rename(columns={'sequences': 'sequence', 'label': 'label_acp'}, inplace=True)

    return acp_train_df, acp_test_df


# Cell

def get_amp_data(test_pct=0.2, seed=1234):
    '''Load, clean, split and return AMP train and test dataframes'''

    amp_df = pd.read_csv(f'{DATA_STORE}/amp/all_data.csv')

    amp_df.drop(columns=['PDBs_code'], inplace=True)
    amp_df.rename(columns={'SequenceID': 'sequence', 'label': 'label_amp'}, inplace=True)

    amp_test_df = amp_df.sample(frac=test_pct, random_state=seed)
    amp_train_df = amp_df.drop(amp_test_df.index)

    return amp_train_df, amp_test_df


# Cell

def get_dna_bind_data():
    '''Load, clean and return ACP train and test dataframes'''

    dna_bind_train_df = pd.read_csv(f'{DATA_STORE}/dna_binding/train.csv')
    dna_bind_test_df = pd.read_csv(f'{DATA_STORE}/dna_binding/test.csv')

    dna_bind_train_df.drop(columns=['code', 'origin'], inplace=True)
    dna_bind_test_df.drop(columns=['code', 'origin'], inplace=True)

    dna_bind_train_df.rename(columns={'label': 'label_dna_bind'}, inplace=True)
    dna_bind_test_df.rename(columns={'label': 'label_dna_bind'}, inplace=True)

    return dna_bind_train_df, dna_bind_test_df


# Cell

def get_all_data(test_pct=0.2, seed=1234, merge=False):
    '''Load, clean, split, maybe merge and return all datasets'''

    acp_train_df, acp_test_df = get_acp_data()
    amp_train_df, amp_test_df = get_amp_data(test_pct=test_pct, seed=seed)
    dna_bind_train_df, dna_bind_test_df = get_dna_bind_data()

    if merge:
        merged_train_df = pd.concat([acp_train_df, amp_train_df, dna_bind_train_df], ignore_index=True).fillna(0)
        merged_test_df = pd.concat([acp_test_df, amp_test_df, dna_bind_test_df], ignore_index=True).fillna(0)
        return [merged_train_df, merged_test_df]
    else:
        return[acp_train_df, acp_test_df, amp_train_df, amp_test_df, dna_bind_train_df, dna_bind_test_df]

